function [f, ploss, vol_pu, vol_deg, P, Q] = fitness(x, fopt, PV, isprint)%%计算每个个体的M个目标函数值

    if ~exist('isprint', 'var')
        isprint = 0;
    end

    x = decouple(x);

    k_T = [2960 2810 2620 2500 2460 2420 2450 2580 2680 2960 3300 3450 3500 3400 3220 3170 3170 3300 3690 3715 3640 3600 3480 3200];
    k_T = k_T/3715;
%     % Active Power in kW Generated by Turbine at Bus 8
%     WG = 0.15;
    % Active Powers in kWs Generated by Photovoltatic Arrays at Bus 8, 25, 32
    P_PV = x(:, 49);
    %     N=33; % Total Number of Buses
    x_x = zeros(24,118);
    % Compensators is allocated at Bus 24, 25, 7, 8, 30, 32, 4, 14, 29, 31, 2, 23
    x_x(:, 50) = x(:,1);
    x_x(:, 111) = x(:,2);
    x_x(:, 74) = x(:,3);
    x_x(:, 28) = x(:,4);
    x_x(:, 63) = x(:,5);
    x_x(:, 102) = x(:,6);
    x_x(:, 80) = x(:,7);
    x_x(:, 107) = x(:,8);
    x_x(:, 70) = x(:,9);
    x_x(:, 109) = x(:,10);
    x_x(:, 36) = x(:,11);
    x_x(:, 97) = x(:,12);
    x_x(:, 20) = x(:,13);
    x_x(:, 101) = x(:,14);
    x_x(:, 40) = x(:,15);
    x_x(:, 58) = x(:,16);
    x_x(:, 37) = x(:,17);
    x_x(:, 31) = x(:,18);
    x_x(:, 54) = x(:,19);
    x_x(:, 41) = x(:,20);
    x_x(:, 86) = x(:,21);
    x_x(:, 42) = x(:,22);
    x_x(:, 71) = x(:,23);
    x_x(:, 96) = x(:,24);
    x_x(:, 78) = x(:,25);
    x_x(:, 112) = x(:,26);
    x_x(:, 66) = x(:,27);
    x_x(:, 114) = x(:,28);
    x_x(:, 81) = x(:,29);
    x_x(:, 82) = x(:,30);
    x_x(:, 110) = x(:,31);
    x_x(:, 103) = x(:,32);
    x_x(:, 21) = x(:,33);
    x_x(:, 79) = x(:,34);
    x_x(:, 25) = x(:,35);
    x_x(:, 51) = x(:,36);
    x_x(:, 33) = x(:,37);
    x_x(:, 108) = x(:,38);
    x_x(:, 104) = x(:,39);
    x_x(:, 76) = x(:,40);
    x_x(:, 83) = x(:,41);
    x_x(:, 14) = x(:,42);
    x_x(:, 10) = x(:,43);
    x_x(:, 2) = x(:,44);
    x_x(:, 65) = x(:,45);
    x_x(:, 31) = x(:,46);
    x_x(:, 30) = x(:,47);
    x_x(:, 24) = x(:,48);
    
    for i = 1:24  %动态网损
        mpc = case118zh;
        mpc.bus(:,3:4) = mpc.bus(:,3:4)*k_T(i);
        mpc.bus([9, 5, 23, 35, 43, 52, 60, 69, 75, 83, 106, 111, 118], 3) = -P_PV(i, :)';
        mpc.bus([9, 5, 23, 35, 43, 52, 60, 69, 75, 83, 106, 111, 118], 4) = 0;
%         mpc.bus(8,3) = mpc.bus(8,3)-PV(i);
%         mpc.bus(25,3) = mpc.bus(25,3)-PV(i); 
%         mpc.bus(32,3) = mpc.bus(32,3)-PV(i);
%         mpc.bus(8,3) = -PV(i); mpc.bus(8,4) = 0;
%         mpc.bus(25,3) = -PV(i); mpc.bus(25,4) = 0;
%         mpc.bus(32,3) = -PV(i); mpc.bus(32,4) = 0;
        mpc.bus(:,4) = mpc.bus(:,4)-x_x(i,:)';
        mpopt = mpoption('verbose', 0, 'out.all', isprint); % Get a pretty-printing
        mpcpf = runpf(mpc, mpopt);
        ploss(i, :) = (mpcpf.branch(:,14)+mpcpf.branch(:,16))';
        vol_pu(i, :) = mpcpf.bus(:, 8)';
        vol_deg(i, :) = mpcpf.bus(:, 9)';
        P(i, :) = mpcpf.bus(:, 3)';
        Q(i, :) = mpcpf.bus(:, 4)';
%         ploss(i) = sum(p);
    end
%     f(1) = sum(sum(ploss));
    M = numel(fopt);
    f = zeros(1, M);
    for m = 1:M
        f(m) = eval(fopt{m});
    end
%     f(2) = sum(sum((vol_pu - 1.05).^2));
%     f(2) = mean(mean(abs(vol_pu - 1)));
%     f(2) = mean(mean(abs(vol_pu - 1.05)));
%     f(3) = max(mean(abs(x - mean(x)))) * 1000;
end